import numpy as np
from fastapi.testclient import TestClient
from app.main import api
from app.Fixtures.gams import study_export
from app.prediction.predict import predict_mortality
from app.Fixtures.constants import RANDOM_SEED

client = TestClient(api)


def test_index():
    response = client.get("/")
    assert response.status_code == 200


patient1 = {
    "Age": 40,
    "ASA": 3,
    "HR": 87,
    "SBP": 120,
    "WCC": 13,
    "Na": 135,
    "K": 8,
    "Urea": 2,
    "Creat": 4,
    "GCS": 15,
    "Resp": 2,
    "Cardio": 1,
    "Sinus": False,
    "CT_performed": True,
    "Indication": 1,
    "Malignancy": 2,
    "Soiling": 2,
    "Lactate": 1,
}


# An example patient with observed lactate & albumin, Winsorisation not required
patient2 = {
  "Age": 81,
  "ASA": 2,
  "HR": 82,
  "SBP": 104,
  "WCC": 9.1,
  "Na": 135,
  "K": 4.4,
  "Urea": 8.7,
  "Creat": 78,
  "GCS": 15,
  "Resp": 0,
  "Cardio": 1,
  "Sinus": 0,
  "CT_performed": 1,
  "Indication": 0,
  "Malignancy": 0,
  "Soiling": 1,
  "Lactate": 3.2,
  "Albumin": 25
}


# Keys = API variable names, values = corresponding NELA variable names
api_nela_var_map = {
    "Age": "S01AgeOnArrival",
    "ASA": "S03ASAScore",
    "HR": "S03Pulse",
    "SBP": "S03SystolicBloodPressure",
    "WCC": "S03WhiteCellCount",
    "Na": "S03Sodium",
    "K": "S03Potassium",
    "Urea": "S03Urea",
    "Creat": "S03SerumCreatinine",
    "GCS": 'S03GlasgowComaScore',
    "Resp": 'S03RespiratorySigns',
    "Cardio": 'S03CardiacSigns',
    "Sinus": "S03ECG",
    "CT_performed": "S02PreOpCTPerformed",
    "Indication": "Indication",
    "Malignancy": 'S03DiagnosedMalignancy',
    "Soiling": 'S03Pred_Peritsoil',
    "Lactate": 'S03PreOpArterialBloodLactate',
    "Albumin": 'S03PreOpLowestAlbumin'
}


def test_predict_api_both_impute():
    response = client.post(
        "/predict", headers={"Content-Type": "application/json"}, json=patient1
    )
    assert response.status_code == 200

    body = dict(response.json())
    assert len(body["Result"]) == 1000


def test_predict_api_alb_impute():
    patient1["Albumin"] = 40

    response = client.post(
        "/predict", headers={"Content-Type": "application/json"}, json=patient1
    )
    assert response.status_code == 200

    body = dict(response.json())
    assert len(body["Result"]) == 1000


def test_predict_api_basic():
    patient1["Lactate"] = 1

    response = client.post(
        "/predict", headers={"Content-Type": "application/json"}, json=patient1
    )
    assert response.status_code == 200

    body = dict(response.json())

    assert type(body["ID"]) == str
    assert type(body["Seed"]) == int
    assert type(body["Result"]) == list
    assert len(body["Result"]) == 1000


def test_predict_api_invalid_cat():
    patient1["Soiling"] = 7
    response = client.post(
        "/predict", headers={"Content-Type": "application/json"}, json=patient1
    )

    assert response.status_code == 422


def test_predict_api_invalid_type():
    patient1["soiling"] = 1
    patient1["SBP"] = 103.4
    response = client.post(
        "/predict", headers={"Content-Type": "application/json"}, json=patient1
    )

    assert response.status_code == 422


def test_predict_api_vs_direct_prediction():
    """
    Compares mortality risk predictions from the predict API, to those
    generated by direct use of predict_mortality() in a patient that doesn't
    require Winsorisation or lactate / albumin imputation. These should be the
    same.
    """
    # Get API mortality risk prediction
    response = client.post(
        "/predict", headers={"Content-Type": "application/json"}, json=patient2
    )
    assert response.status_code == 200
    api_pred = np.array(response.json()["Result"])

    # Get a 1-row DataFrame with same columes as input to predict_mortality()
    features = study_export['mortality']['input_data']['describe'].iloc[
        5:6
    ].reset_index(drop=True)

    # Replace values with those from example patient 2, and add missingness vars
    direct_patient = {}
    for api_name, value in patient2.items():
        direct_patient[api_nela_var_map[api_name]] = value
    direct_patient["S03PreOpLowestAlbumin_missing"] = 0.
    direct_patient['S03PreOpArterialBloodLactate_missing'] = 0.

    # Get direct mortality risk prediction
    direct_pred = predict_mortality(
        features=features,
        n_samples_per_row=api_pred.size,
        random_seed=RANDOM_SEED
    )

    # Compare predictions
    # TODO: We need to round for the test to pass - why so much numerical error?
    decimal_places = 4
    assert (
        direct_pred.round(decimal_places) == api_pred.round(decimal_places)
    ).all()
